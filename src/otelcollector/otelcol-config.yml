# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0
receivers: # didnt work for me ${file:otelcol-hostmetrics.yml}
  filelog/localhost_linux_system:
    include:
      - /var/log/*.log
    include_file_path: true
    operators:
      - type: move
        from: attributes["log.file.name"]
        to: attributes["log_file_name"]
      - type: move
        from: attributes["log.file.path"]
        to: attributes["log_file_path"]
    attributes:
      type: agent-linux
  hostmetrics/localhost_linux_system:
    collection_interval: 15s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      load:
      filesystem:
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
      paging:
      process:
        exclude:
          names: ['launcher']
          match_type: strict
        mute_process_name_error: true
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_user_error: true

### old hostmetrics configuration
#  hostmetrics:
#    collection_interval: 60s
#    root_path: /hostfs
#    scrapers:
#      cpu:
#        metrics:
#          system.cpu.utilization:
#            enabled: true
#      load: null
#      memory:
#        metrics:
#          system.memory.utilization:
#            enabled: true
#      disk: null
#      filesystem:
#        exclude_fs_types:
#          fs_types:
#          - autofs
#         - binfmt_misc
#          - bpf
#          - cgroup2
#          - configfs
#          - debugfs
#          - devpts
#          - devtmpfs
#          - fusectl
#          - hugetlbfs
#          - iso9660
#          - mqueue
#          - nsfs
#          - overlay
#          - proc
#          - procfs
#          - pstore
#          - rpc_pipefs
#          - securityfs
#          - selinuxfs
#          - squashfs
#          - sysfs
#          - tracefs
#          match_type: strict
#        exclude_mount_points:
#          match_type: regexp
#          mount_points:
#          - /dev/*
#          - /proc/*
#          - /sys/*
#          - /run/docker/*
#          - /run/k3s/containerd/*
#          - /var/lib/docker/*
#          - /var/lib/kubelet/*
#          - /snap/*
#        metrics:
#          system.filesystem.utilization:
#            enabled: true

#      network: null
#      paging:
#      processes:
#      process:

  snmp:
    collection_interval: 60s
    endpoint: udp://172.24.79.29:161
    version: v2c
    community: public
#    resource_attributes:
#      ifIndex:
#        description: "A unique value for each interface"
#        oid: "1.3.6.1.2.1.2.2.1.1"
#      ifName:
#        description: "The name of the interface"
#        oid: "1.3.6.1.2.1.31.1.1.1.1" # Replace with the correct OID for ifName

    resource_attributes:
      ifIndex:
        description: "A unique value for each interface"
        oid: "1.3.6.1.2.1.2.2.1.1"
      #  indexed_value_prefix: probe

      ifName:
        description: "The name of the interface"
        oid: "1.3.6.1.2.1.31.1.1.1.1" # Replace with the correct OID for ifName


    attributes:
      ifIndex:
        oid: "1.3.6.1.2.1.2.2.1.1"
      ifName:
        oid: "1.3.6.1.2.1.31.1.1.1.1"

    metrics:
      ifAdminStatus:
        description: "The desired state of the interface"
        unit: 1
        gauge:
          value_type: int
        column_oids:
          - oid: "1.3.6.1.2.1.2.2.1.7"
            attributes:
              - name: ifIndex
  #              from_oid: "1.3.6.1.2.1.2.2.1.1"
              - name: ifName
  #              from_oid: "1.3.6.1.2.1.31.1.1.1.1"



  syslog:
    udp:
      listen_address: "0.0.0.0:1514"
    protocol: rfc5424
    location: UTC
    operators:
      - type: move
        from: attributes.message
        to: body
      - type: add
        field: attributes.log.source
        value: syslog    
  otlp:
    protocols:
      grpc:
        include_metadata: true
        endpoint: 0.0.0.0:4317
      http:
        include_metadata: true
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"
  httpcheck/frontendproxy:
    targets:
      - endpoint: http://frontendproxy:${env:ENVOY_PORT}

exporters:
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200
  
  otlp:
    sending_queue:
      enabled: true
    endpoint: "jaeger:4317"
    tls:
      insecure: true
  otlp/logs:
    endpoint: "dataprepper:21892"
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true

  logzio/traces:
    account_token: "xBfrWCtlMmJdiaGvyrPZMYcVcyPixemf"
    region: "us-east-1"

  prometheusremotewrite:
    endpoint: "https://listener.logz.io:8053"
    headers:
      Authorization: "Bearer qdlRBBOKErlvkeAqcsJyEPRXYOdCfpuw"
    resource_to_telemetry_conversion: # should we add? this came from the hostmetrics of logz.io
      enabled: true    
  

  logzio/logs:
    account_token: "FKgUhAUqSXyJUqQWSXBtZgcjgqBIEUDg"
    region: "us-east-1"

processors:
  resourcedetection/system:
    detectors: ["system"]
    system:
      hostname_sources: ["os"]
  resource/agent:
    attributes:
      - key: logzio_agent_version
        value: v1.1.21
        action: upsert
  filter:
    metrics:
      include:
        match_type: strict
        metric_names: ["system.cpu.time", "system.cpu.load_average.1m", "system.cpu.load_average.5m", "system.cpu.load_average.15m", "system.cpu.utilization", "system.memory.usage", "system.memory.utilization", "system.filesystem.usage", "system.disk.io", "system.disk.io_time", "system.disk.operation_time", "system.network.connections", "system.network.io", "system.network.packets", "system.network.errors", "process.cpu.time", "process.memory.usage", "process.disk.io", "process.memory.usage", "process.memory.virtual"]
  batch:
    timeout: 10s
    send_batch_size: 10000
    send_batch_max_size: 11000
  filter/ottl: ###does this overlap with the other filter?
    error_mode: ignore
    metrics:
      metric:
        # FIXME: remove when a Metrics View is implemented in the checkout and productcatalog components
        # or when this issue is resolved: https://github.com/open-telemetry/opentelemetry-go-contrib/issues/3071
        - 'name == "rpc.server.duration"'
  transform:
    metric_statements:
      - context: metric
        statements:
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-java/issues/4834
          - set(description, "") where name == "queueSize"
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-python-contrib/issues/1958
          - set(description, "") where name == "http.client.duration"

connectors:
  spanmetrics:

service:
  extensions: [health_check, zpages]
  telemetry:
    logs:
      level: "error"
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch, resourcedetection/system]
      exporters: [otlp, debug, spanmetrics, logzio/logs, logzio/traces]
    metrics:
      receivers: [httpcheck/frontendproxy, otlp, spanmetrics, snmp, hostmetrics/localhost_linux_system] 
      processors: [filter/ottl, transform, batch, resourcedetection/system, resource/agent]
      exporters: [otlphttp/prometheus, debug, prometheusremotewrite]
    logs:
      receivers: [otlp, syslog, filelog/localhost_linux_system]
      processors: [batch]
      exporters: [otlp/logs, debug, logzio/logs]


extensions:
  health_check:
  zpages: