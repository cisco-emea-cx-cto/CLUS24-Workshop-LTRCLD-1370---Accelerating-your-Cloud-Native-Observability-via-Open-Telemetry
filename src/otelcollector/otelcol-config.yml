# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

receivers:
#  hostmetrics:
#    collection_interval: 60s
#    root_path: /hostfs
#    scrapers:
#      cpu:
#        metrics:
#          system.cpu.utilization:
#            enabled: true
#      load: null
#      memory:
#        metrics:
#          system.memory.utilization:
#            enabled: true
#      disk: null
#      filesystem:
#        exclude_fs_types:
#          fs_types:
#          - autofs
#          - binfmt_misc
#          - bpf
#          - cgroup2
#          - configfs
#          - debugfs
#          - devpts
#          - devtmpfs
#          - fusectl
#          - hugetlbfs
#          - iso9660
#          - mqueue
#          - nsfs
#          - overlay
#          - proc
#          - procfs
#          - pstore
#          - rpc_pipefs
#          - securityfs
#          - selinuxfs
#          - squashfs
#          - sysfs
#          - tracefs
#          match_type: strict
##        exclude_mount_points:
#          match_type: regexp
#          mount_points:
#          - /dev/*
#          - /proc/*
#          - /sys/*
#          - /run/docker/*
#          - /run/k3s/containerd/*
#          - /var/lib/docker/*
#          - /var/lib/kubelet/*
#          - /snap/*
#        metrics:
#          system.filesystem.utilization:
#            enabled: true
#
#      network: null
#      paging:
#      processes:

  syslog:
    udp:
      listen_address: "0.0.0.0:1514"
    protocol: rfc5424
    location: UTC
    operators:
      - type: move
        from: attributes.message
        to: body
      - type: add
        field: attributes.log.source
        value: syslog
  otlp:
    protocols:
      grpc:
        include_metadata: true
        endpoint: 0.0.0.0:4317
      http:
        include_metadata: true
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"
  httpcheck/frontendproxy:
    targets:
      - endpoint: http://frontendproxy:${env:ENVOY_PORT}

exporters:
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200
  
  otlp:
    sending_queue:
      enabled: true
    endpoint: "jaeger:4317"
    tls:
      insecure: true
  otlp/logs:
    endpoint: "dataprepper:21892"
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true

processors:
  batch:
    timeout: 10s
    send_batch_size: 10000
    send_batch_max_size: 11000
  filter/ottl:
    error_mode: ignore
    metrics:
      metric:
        # FIXME: remove when a Metrics View is implemented in the checkout and productcatalog components
        # or when this issue is resolved: https://github.com/open-telemetry/opentelemetry-go-contrib/issues/3071
        - 'name == "rpc.server.duration"'
  transform:
    metric_statements:
      - context: metric
        statements:
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-java/issues/4834
          - set(description, "") where name == "queueSize"
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-python-contrib/issues/1958
          - set(description, "") where name == "http.client.duration"

connectors:
  spanmetrics:

service:

  telemetry:
    logs:
      level: "error"
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp, debug, spanmetrics]
    metrics:
      receivers: [httpcheck/frontendproxy, otlp, spanmetrics] #hostmetrics
      processors: [filter/ottl, transform, batch]
      exporters: [otlphttp/prometheus, debug]
    logs:
      receivers: [otlp, syslog]
      processors: [batch]
      exporters: [otlp/logs, debug]


